DEFINITION MODULE M2HA; (* HS 19.4.85 / 10.6.86 / 28.4.89 / 21.3.91 *)
  (* Interface to the MOTOROLA MC68000/MC68010/MC68020/MC68040 processors. *)
  FROM M2DA IMPORT ObjPtr, StrPtr, ConstValue, Standard;
  FROM M2SA IMPORT Symbol;
  CONST   (* D-Register pool for expression evaluation *)
          D0 = 0;  (* freely used, never reserved      *)
          D1 = 1;  (* freely used, never reserved      *)
          (* F-Register pool for floating point arith. *)
          F0 = 0;  (* freely used, never reserved      *)
          F1 = 1;  (* freely used, never reserved      *)
          (* Dedicated A-Registers                     *)
          SB = 4;  (* SB = A4: static base pointer     *)
          A5 = 5;  (* A5 is   n e v e r   used !       *)
          MP = 6;  (* MP = A6: mark/frame pointer      *)
          SP = 7;  (* SP = A7: active stack pointer    *)
          (* Instruction size for simple types         *)
          byte = 0;   word = 1;   long = 2;
          (* Descriptor size for dynamic array param.  *)
          DynArrDesSize = 6;
  TYPE    Condition = ( T,  F, HI, LS, CC, CS, NE, EQ,
                       VC, VS, PL, MI, GE, LT, GT, LE,
                       FF,    FEQ,  FGT,  FGE,  FLT,  FLE,  FGL, FGLE,
                       FNGLE, FNGL, FNLE, FNLT, FNGE, FNGT, FNE, FT );
          RegType   = (Dreg, Areg);
          Register  = [0 .. 15];
          WidType   = [byte .. long];
          ShiType   = (Asl, Asr, Lsl, Lsr, Rol, Ror);
          FMonadic  = [Abs  .. NonStand];
          FDyadic   = [null .. geq];
          ItemMode  = (absMd, RindMd, RidxMd, conMd,
                       stkMd, AregMd, DregMd, cocMd,
                       typMd, procMd, codMd,  prgMd,
                       fltMd);
          ItSet     = SET OF ItemMode;
          Item      = RECORD
                        typ: StrPtr;
                        CASE mode: ItemMode OF
                          absMd, RindMd, RidxMd,
                          stkMd, AregMd, DregMd:
                                  mod, lev:   INTEGER;
                                  adr, off:   INTEGER;
                                  R, RX:      Register;
                                  wid:        WidType;
                                  scl:        INTEGER;
                                  indir:      BOOLEAN;
                        | conMd:  val:        ConstValue;
                        | cocMd:  CC:         Condition;
                                  Tjmp, Fjmp: INTEGER;
                        | procMd,
                          codMd:  proc:       ObjPtr;
                        | prgMd:  where:      INTEGER;
                        | fltMd:  FR:         Register;
                        | typMd:  (* no field *)
                        END;
                      END;
          Processor = ARRAY[0..9] OF CHAR;
  VAR curLev : INTEGER;
  PROCEDURE ProcessorID(VAR id: Processor);
  PROCEDURE LongVal  (VAR x: Item): LONGINT;   (* 32 bits of constant x      *)
  PROCEDURE WordVal  (VAR x: Item): INTEGER;   (* 16 bits of constant x      *)
  PROCEDURE SimpleC  (VAR x: Item): BOOLEAN;   (* is x a simple constant     *)
  PROCEDURE SignedT  (VAR x: Item): BOOLEAN;   (* is x a signed type         *)
  PROCEDURE SimpleT  (VAR x: Item): BOOLEAN;   (* is x a simple type         *)
  PROCEDURE RealT    (VAR x: Item): BOOLEAN;   (* is x a floating-point type *)
  PROCEDURE SetglbMd(VAR x: Item; fadr: INTEGER;  ftyp: StrPtr);
  PROCEDURE SetlocMd(VAR x: Item; fadr: INTEGER;  ftyp: StrPtr);
  PROCEDURE SetregMd(VAR x: Item; freg: Register; ftyp: StrPtr);
  PROCEDURE SetstkMd(VAR x: Item; ftyp: StrPtr);
  PROCEDURE SetfltMd(VAR x: Item; fR: Register;   ftyp: StrPtr);
  PROCEDURE SetconMd(VAR x: Item; fval: LONGINT;  ftyp: StrPtr);
  PROCEDURE GetReg     (VAR r: Register; qual: RegType);
  PROCEDURE GetFReg    (VAR r: Register);
  PROCEDURE Release    (VAR x: Item);
  PROCEDURE ReleaseReg (r: Register);
  PROCEDURE LockReg    (r: Register);
  PROCEDURE UnlockReg  (r: Register);
  PROCEDURE SetbusyReg (r: Register);
  PROCEDURE SaveRegs   (VAR saveSet: LONGINT);
  PROCEDURE RestoreRegs(saveSet: LONGINT);
  PROCEDURE InitRegs;
  PROCEDURE CheckRegs;
  PROCEDURE Isz (VAR x: Item; VAR fsz: WidType); (* instruction size for x  *)
  PROCEDURE Gea (VAR x: Item; VAR fea: INTEGER); (* effective address for x *)
  PROCEDURE Ext (VAR x: Item);                   (* instr. extension for x  *)
  PROCEDURE InvertCC  (cond: Condition): Condition;  (* inverse condition *)
  PROCEDURE Jf        (cond: Condition; VAR l: INTEGER);(* jump forward  *)
  PROCEDURE Jb        (cond: Condition; l: INTEGER);    (* jump backward *)
  PROCEDURE StackTop(i: INTEGER);          (* increment stack pointer SP*)
  PROCEDURE SetupSL(plev: INTEGER);        (* push Static Link to stack *)
  PROCEDURE CallSystem(n: INTEGER);        (* call System.#n procedure  *)
  PROCEDURE GenHalt(haltindex: INTEGER);   (* call System.HALTX proc.   *)
  PROCEDURE LoadAdr   (VAR x: Item);       (* load address of x         *)
  PROCEDURE LoadD     (VAR x: Item);       (* load data designated by x *)
  PROCEDURE LoadP     (VAR x: Item);       (* load pointer design. by x *)
  PROCEDURE LoadX     (VAR x: Item;        (* load and extend value(x)  *)
                       req: WidType);      (* to requested width        *)
  PROCEDURE LoadF     (VAR x: Item);       (* load data x to FP-Reg.    *)
  PROCEDURE Move      (VAR x, y: Item);    (* value(x) --> y            *)
  PROCEDURE MoveAdr   (VAR x, y: Item);    (* adr(x)   --> y            *)
  PROCEDURE MoveBlock (VAR x, y: Item;     (* mve 'sz' bytes of x to y  *)
                       sz: INTEGER; isstring: BOOLEAN);
  PROCEDURE FMove     (VAR x, y: Item);    (* floating move x --> y     *)
  PROCEDURE Neg1      (VAR x: Item);       (* x := -x                   *)
  PROCEDURE Abs1      (VAR x: Item);       (* x := ABS(x)               *)
  PROCEDURE Cap1      (VAR x: Item);       (* x := CAP(x)               *)
  PROCEDURE Tst1      (VAR x: Item);       (* x - 0                     *)
  PROCEDURE Com1      (VAR x: Item);       (* x := complement(x)        *)
  PROCEDURE Inc1      (VAR x: Item);       (* x := x + 1                *)
  PROCEDURE Dec1      (VAR x: Item);       (* x := x - 1                *)
  PROCEDURE FMonad    (op: FMonadic;       (* the monadic floating ops. *)
                       VAR x: Item);
  PROCEDURE Add2      (VAR x, y: Item);    (* x := x + y                *)
  PROCEDURE Sub2      (VAR x, y: Item);    (* x := x - y                *)
  PROCEDURE And2      (VAR x, y: Item);    (* x := x AND y              *)
  PROCEDURE Or2       (VAR x, y: Item);    (* x := x OR y               *)
  PROCEDURE Eor2      (VAR x, y: Item);    (* x := x EOR y              *)
  PROCEDURE Div2      (VAR x, y: Item);    (* x := x DIV y              *)
  PROCEDURE Mod2      (VAR x, y: Item);    (* x := x MOD y              *)
  PROCEDURE Mul2      (VAR x, y: Item);    (* x := x * y                *)
  PROCEDURE Cmp2      (VAR x, y: Item);    (* x - y                     *)
  PROCEDURE In2       (VAR x, y: Item);    (* x IN y                    *)
  PROCEDURE Shi2      (VAR x, y: Item;     (* x := x shifted by y       *)
                       shiftop: ShiType);
  PROCEDURE Ash2      (VAR x, y :Item;     (* x := x arith.shifted by y *)
                       shiftop: ShiType);
  PROCEDURE FDyad     (op: FDyadic;        (* the dyadic floating ops.  *)
                       VAR x, y: Item);
  PROCEDURE ConvertTyp(functyp: StrPtr; VAR x: Item);
    (* x := x converted to type functyp *)
  PROCEDURE ConIndex(VAR x: Item; inc: INTEGER);
    (* constant offset/index inc to base x *)
  PROCEDURE VarIndex(VAR x, y: Item; elsize: INTEGER);
    (* variable offset/index y to base x (elements of size elsize) *)
  PROCEDURE GetHigh(VAR x: Item);
    (* get high bound of dynamic array parameter x *)
  PROCEDURE Normalize(VAR x: Item; i: INTEGER);
    (* normalize subrange x to zero by lowbound i *)
  PROCEDURE CheckHigh(VAR x, high: Item);
    (* check x in the variable range [ 0 .. high ] *)
  PROCEDURE CheckClimit(VAR x: Item; limit: LONGINT);
    (* check x in the constant interval [ 0 .. limit ] *)
  PROCEDURE CheckRange(VAR x: Item; min, max, BndAdr: INTEGER);
    (* check x in the constant range [ min .. max ] *)
  PROCEDURE CheckPointer(VAR x: Item);
    (* check x to be a non-NIL pointer *)
  PROCEDURE CheckDbltoSingle(VAR x, y: Item);
    (* check for assignment of double-word x to single-word y *)
  PROCEDURE PreLoad(VAR op: Symbol; VAR x, y: Item);
    (* preload x and/or y for dyadic operators *)
  PROCEDURE DynArray(VAR x, y: Item);
    (* descriptor for dynamic array parameter *)
  PROCEDURE CopyDynArray(adr, size: INTEGER);
    (* value for dynamic array parameter *)
  PROCEDURE EnterCase(VAR x: Item; base, lo, hi: INTEGER);
    (* enter case-statement processor *)
  PROCEDURE ExitCase;
    (* leave case-statement processor *)
  PROCEDURE Link(VAR l: INTEGER; lev: INTEGER);
    (* generate entry-code for procedure at level lev *)
  PROCEDURE Unlink(parSize: INTEGER; lev: INTEGER);
    (* generate exit-code for procedure at level lev *)
  PROCEDURE CallInt(proc: ObjPtr);    (* call of local procedure     *)
  PROCEDURE CallExt(proc: ObjPtr);    (* call of external procedure  *)
  PROCEDURE CallInd(VAR x: Item);     (* call of procedure variable  *)
  PROCEDURE EnterModule;              (* main module's entry code    *)
  PROCEDURE ExitModule;               (* main module's exit code     *)
  PROCEDURE InitModule(m: INTEGER);   (* init of imported modules    *)
  PROCEDURE InitM2HM;
END M2HA. (* Copyright Departement Informatik, ETH Zuerich, Switzerland, 1992 *)
